import { useCallback, useEffect, useState } from 'react'
import { fetchWeatherApi } from 'openmeteo'
import './App.css'
import Carousel from './components/Carousel/Carousel'
import Nav from './components/Nav/Nav'
import StarRating from './components/StarRating/StarRating'

type Location = {
  latitude: number
  longitude: number
} | null

type Forecast = {
  daily: {
    time: Date[]
    temperature2mMax: Float32Array<ArrayBufferLike>
    temperature2mMin: Float32Array<ArrayBufferLike>
  }
} | null

const App = () => {
  const [location, setLocation] = useState<Location>(null);
  const [error, setError] = useState<string | null>(null);
  const [forecast, setForecast] = useState<Forecast>(null);

  // Get weather info for the coming week here in App.
  const getLocation = () => {
    console.log("Get location")
    navigator.geolocation.getCurrentPosition(
      (position: GeolocationPosition) => { setLocation({ latitude: position.coords.latitude, longitude: position.coords.longitude }) },
      (err: GeolocationPositionError) => { setError(err.message) }
    )
  }

  /**
   * Gets the weather forecast for the coming week from Open Meteo. This is
   * a useCallback function that runs when the user's location has been
   * successfully retrieved.
   * 
   * Partially generated by https://open-meteo.com/en/docs
   */
  const getForecast = useCallback(async () => {
    if (location) {
      const params = {
        "latitude": location.latitude,
        "longitude": location.longitude,
        "daily": ["temperature_2m_max", "temperature_2m_min"],
        "wind_speed_unit": "kn",
        "timezone": "auto"
      }
      const url = 'https://api.open-meteo.com/v1/forecast'
      // const url = 'https://api.open-meteo.com/v1/forecasnldkalksdhdalsst' // malformed
      const responses = await fetchWeatherApi(url, params)

      // Helper function to form time ranges
      const range = (start: number, stop: number, step: number) =>
        Array.from({ length: (stop - start) / step }, (_, i) => start + i * step);

      // Process first location. Add a for-loop for multiple locations or weather models
      const response = responses[0];

      // Attributes for timezone and location
      const utcOffsetSeconds = response.utcOffsetSeconds();
      // const timezone = response.timezone();
      // const timezoneAbbreviation = response.timezoneAbbreviation();
      // const responseLatitude = response.latitude();
      // const responseLongitude = response.longitude();

      const daily = response.daily()!;

      // Note: The order of weather variables in the URL query and the indices below need to match!
      const weatherData = {
        daily: {
          time: range(Number(daily.time()), Number(daily.timeEnd()), daily.interval()).map(
            (t) => new Date((t + utcOffsetSeconds) * 1000)
          ),
          temperature2mMax: daily.variables(0)!.valuesArray()!,
          temperature2mMin: daily.variables(1)!.valuesArray()!,
        },
      };

      // `weatherData` now contains a simple structure with arrays for datetime and weather data
      for (let i = 0; i < weatherData.daily.time.length; i++) {
        console.log(
          weatherData.daily.time[i].toISOString(),
          weatherData.daily.temperature2mMax[i],
          weatherData.daily.temperature2mMin[i]
        );
      }

      console.log("Weather data: ", weatherData)
      setForecast(weatherData)
    } else {
      console.error("No location found!")
      setError("Failed to fetch forecast data: No location found!")
    }
  }, [location])

  useEffect(() => {
    if (location) {
      getForecast()
    }
  }, [location, getForecast])

  return (
    <>
      <Nav />
      {/* At-a-glance day 5 star ratings for sailing and swimming */}
      <div className="card">
        <h1 className="text-xl font-bold">
          Good {new Date().getHours() < 12 ? 'morning' : 'afternoon'}.
        </h1>
        <p className="text-sm text-slate-400">Tap on a day to see more info below.</p>

        {/* Sample carousels */}
        <h2 className="text-lg font-bold">Sailing</h2>
        <Carousel items={[<StarRating stars={3.5} />, <StarRating stars={2.5} />, <StarRating stars={5} />, <StarRating stars={3.5} />, <StarRating stars={3.5} />, <StarRating stars={3.5} />, <StarRating stars={3.5} />,]} />

        <h2 className="text-lg font-bold">Swimming</h2>
        <Carousel items={[<StarRating stars={3.5} />, <StarRating stars={1} />, <StarRating stars={3.5} />, <StarRating stars={3.5} />, <StarRating stars={3.5} />, <StarRating stars={3.5} />, <StarRating stars={3.5} />,]} />
      </div>

      {/* Double small previews (temp icons here) */}
      {/* <div className="double-card flex flex-row w-11/12 lg:w-1/2 gap-3">
        <div><FaTemperatureHalf className="h-24 text-blue-500" /></div>
        <div><FaWind className="h-24 text-blue-500" /></div>
      </div> */}

      {/* Main weather forecast section */}
      <div className="card text-center">
        <button className="btn-secondary" onClick={getLocation}>Get location</button>

        {
          location
          && (
            <p>
              Lat: {location.latitude}, Lon: {location.longitude}
            </p>
          )
          || (
            <div className="animate-pulse my-2">
              <div className="h-6 bg-gray-300 rounded w-3/4 mb-2"></div>
              <div className="h-6 bg-gray-300 rounded w-1/2 mb-2"></div>
              <div className="h-6 bg-gray-300 rounded w-full"></div>
            </div>
          )
        }

        {
          forecast
          && (
            <p className="overflow-scroll">
              Forecast response: {JSON.stringify(forecast)}
            </p>
          )
          || (
            <div className="animate-pulse my-2">
              <div className="h-6 bg-gray-300 rounded w-3/4 mb-2"></div>
              <div className="h-6 bg-gray-300 rounded w-1/2 mb-2"></div>
              <div className="h-6 bg-gray-300 rounded w-full"></div>
            </div>
          )
        }
        {error && <p className="text-red-500">Error: {error}</p>}
      </div>
    </>
  )
}

export default App
